<?php
/**
 * @file
 * Handles all of the custom pickup functions
 */

/**
 * Implements hook_menu().
 */
function custom_pickup_menu() {
  $items = array();

  $items['pickup'] = array(
    'title'            => 'Rides Available',
    'page callback'    => 'custom_pickup_output',
    'access arguments' => array('access content'),
  );

  $items['pickup/admin'] = array(
    'title'            => 'Rides Available',
    'page callback'    => 'custom_pickup_output',
    'access arguments' => array('access content'),
  );
	
	$items['pickup/get_customer_loc'] = array(
    'title'            => 'Customer location',
    'page callback'    => 'custom_pickup_get_customer_loc',
    'access arguments' => array('access content'),
  );
	
	$items['pickup/get_avail_drivers_location'] = array(
    'title'            => 'Driver location',
    'page callback'    => 'custom_pickup_get_driver_loc',
    'access arguments' => array('access content'),
  );

  return $items;
}

/**
 * Function that returns all available rides
 *
 * @pram string $cck
 *   The node type that you want to query..
 *
 * @param string $cck
 * @return array
 *   This returns all available rides as an array of objects
 */
function custom_pickup_available_rides($cck='taxi_ride') {
  $rides = db_query('
  SELECT
    node.nid,
    start_time.field_start_time_value,
    field_datageo_lat,
    field_datageo_lon
  FROM
    node
    left join field_data_field_car_driver as driver
      on driver.entity_id = node.nid
    join field_data_field_datageo as geo
      on geo.entity_id = node.nid
    join field_data_field_start_time as start_time
      on start_time.entity_id = node.nid
  WHERE
    driver.entity_id is null
  and
    node.type = :type', array(':type' => $cck))->fetchAll();
  return $rides;
}

/**
 * Generates a single accept ride button.
 *
 * @param int $uid
 *   The user (driver) that you want to generate the button for.
 * @return string
 */
function custom_pickup_content($uid=0) {
  global $base_url;
	
	$x = 0;
  $content = '';

  $rides = custom_pickup_available_rides();
  $x = count($rides);

  $content .= '<div>';
  while ($x > 0) {
    $x--;
    $content .= '<a class="large button success" href="/node/' . $rides[$x]->nid . '/accept">' . t('Pickup Ride at :date', array(':date' => date("Y-m-d H:i:s", $rides[$x]->field_start_time_value)));
    $content .= custom_pickup_drivers($rides[$x]->field_datageo_lat, $rides[$x]->field_datageo_lon);
    $content .=  '</a>';
    $content .=  '<br />';
    $content .= '<audio src="https://www.black.cr/alert.mp3" autoplay></audio>';
   /* $content .= '
		<script type="text/javascript">
			console.log("'.$base_url.'/alert.mp3");
		</script>
		<audio controls autoplay>
		 <source src="'.$base_url.'/alert.mp3" type="audio/mpeg">
		</audio>';*/
    $content .= '<span class="large button alert reject" href="">' . t('Reject');
    $content .=  '</span>';
  }

  $content .= '</div>';

  return $content;
}

/**
 * Determines if the request is in a taxi area.
 *
 * @param float $lat
 *   The latitude of the request.
 * @param float $lon
 *   The longitude of the request.
 *
 * @return array
 *   An array of the term IDs of the taxis that cover the location.
 */
function custom_pickup_taxi_area($lat, $lon) {
    $taxi_area = db_query('
      SELECT DISTINCT
        entity_id "eid"
      FROM
        field_data_field_coverage_area
      WHERE
          entity_type LIKE :taxonomy
        AND
          bundle = :taxi_area
        AND
          field_coverage_area_left < :lon
        AND
          field_coverage_area_right > :lon
        AND
          field_coverage_area_top > :lat
        AND
          field_coverage_area_bottom < :lat
        ', array(
          ':taxonomy' => 'taxonomy_term',
          ':taxi_area' => 'taxi_area',
          ':lat' => $lat,
          ':lon' => $lon,
          ))->fetchAll();
    return $taxi_area;
}

/**
 * Create a list of the available drivers for a ride.
 *
 * @param float|int $lat
 *   The latitude of the pickup request.
 * @param float|int $lon
 *   The longitude of the pickup request.
 * @param array $rid
 *   An array of int Role ID(s) of the drivers you are looking for. (rid 4 is town car driver)
 *
 * @return string
 *   The HTML to embed in a page or block.
 */
function custom_pickup_drivers($lat=0, $lon=0, $rid= array(4, 11)) {
  $x = 0;
  $content = '';
  $drivers = db_query('
  select
    profile.uid,
    entity_id,
    sqrt( power((field_car_location_lat - :lat ) ,2)  + power((field_car_location_lon - :lon) ,2)) * 69  as distance
  from
    field_data_field_car_location
    join profile
      on profile.pid = field_data_field_car_location.entity_id
    join users_roles
      on users_roles.uid = profile.uid
  where
    profile.uid
      IN
        (select uid from users_roles where rid = 8)
  AND
    users_roles.rid IN (:rid)
  order by
    distance desc', array(':lat' => $lat, ':lon' => $lon, ':rid' => $rid))->fetchAll();

  $x = count($drivers);
  while ($x > 0) {
    $x--;
    $content .= '<div class="driver-' . $drivers[$x]->uid . '" >';
    $content .= t('Driver :uid is :distance miles away.', array(':uid' => $drivers[$x]->uid, ':distance' => number_format($drivers[$x]->distance, 2)));
    $content .= '</div>';
  }
  return $content;
}

/**
 * Print out the get ride and cancel buttons.
 *
 * @param $nid
 * @param $distance
 * @param int $bounty
 * @param null $start_time
 * @param $driver
 * @internal param $drivers
 * @return string
 * @internal param $
 */
function custom_pickup_alert_button($nid, $distance, $bounty = 0, $start_time = NULL, $driver = -1) {
  global $base_url; 
  $content = '<a class="large button success" href="/node/' . $nid . '/accept">' . t('Accept');
  if ($start_time != NULL) {
    //$content .= date("Y-m-d H:i:s", $start_time) . '<br />' ;
    $content .= date("H:i:s", $start_time) . '<br />';
  }
  $content .= t('The Pickup is :distance miles away', array(':distance' => number_format($distance, 2)));
  $content .= '<audio src="https://www.black.cr/alert.mp3"  autoplay></audio>';
   /*$content .= '
	 <script type="text/javascript">
			console.log("'.$base_url.'/alert.mp3");
		</script>
	 <audio controls autoplay>
   <source src="'.$base_url.'/alert.mp3" type="audio/mpeg">
  </audio>';*/
  if ($bounty > 0) {
    $content .= '<h2>' . t('Bounty of $') . $bounty . '.</h2>';
  }
  $content .= '</a>';
  $content .= '<br />';
  $content .= '<span class="large button alert reject" href="">' . t('Reject');
  $content .= '</span>';
  if ($driver > -1) {
    $content .= $driver . ' drivers';
  }
  return $content;
}

/**
 * Finds the next driver to send an alert to and sends the alert via nodejs.
 *
 * @param int $nid
 *   The node ID.
 * @param int $uid
 *   The user ID.
 * @param array|int $rid
 *   The role ID -- this might need to be reworked.
 *
 * @return NULL
 *   Errors are discarded.
 */
function custom_pickup_driver_alert($nid=0, $uid=1, $rid=array(8)) {

  $path = '/' . drupal_get_path('module', 'custom_pickup');
  $key = 'vUKtuYvHt3yT8CDBVu3QHq6IB92MwL6w'; // this should be grabbed from a config
  $node_type = array('ride_booker', );

  $rides = db_query('
  SELECT
    node.nid,
    node.uid,
    start_time.field_start_time_value,
    field_datageo_lat,
    field_datageo_lon
  FROM
    {node} node
    left join field_data_field_car_driver as driver
      on driver.entity_id = node.nid
    left join field_data_field_ride_event as ride_event
      on ride_event.entity_id = node.nid
    join field_data_field_datageo as geo
      on geo.entity_id = node.nid
    join field_data_field_start_time as start_time
      on start_time.entity_id = node.nid
  WHERE
    (driver.entity_id is null OR field_ride_event_tid = 5)
  and
    node.nid = :nid
  and
    ( field_ride_event_tid is NULL OR
    field_ride_event_tid != 4 )
  and
    node.type IN (:type)', array(':type' => $node_type, ':nid' => $nid))->fetchAll();

  if ( count($rides) === 0 ) {
    return;
  }

  $lat = $rides[0]->field_datageo_lat;
  $lon = $rides[0]->field_datageo_lon;
  $message_id = 'ride' . $nid;

  if (isset($rides[0]->field_start_time_value)) {
    $now = time();
    $time_to_pickup = $rides[0]->field_start_time_value - $now;
    if ( $time_to_pickup > (5 * 60 ) ) {
      $delay = 1000 * ($time_to_pickup - (5 * 60));
    }
    else {
      $delay = 15000;
    }
  }
  else {
    $delay = 15000; // delay is 15 seconds by default this should be set by getting the scheduled time
  }
  $x = 0;
  $drivers = db_query('
  SELECT
    profile.uid,
    entity_id,
    sqrt( power((field_car_location_lat - :lat ) ,2)  + power((field_car_location_lon - :lon) ,2)) * 69  AS distance
  FROM
    field_data_field_car_location
    JOIN profile
      ON profile.pid = field_data_field_car_location.entity_id
    JOIN users_roles
      ON users_roles.uid = profile.uid
  WHERE
    users_roles.rid = :rid
  AND
    profile.uid IN (SELECT uid FROM users_roles WHERE rid = 8)
  ORDER BY
    distance ASC', array(':lat' => $lat, ':lon' => $lon, ':rid' => $rid[0]))->fetchAll();

  $x = count($drivers);
  if ($x === 0) {
    $uid = $rides[0]->uid;
    $subject = t("No drivers");
    $body = t('We are sorry for the inconvience, Do you want to cancel or wait?'); // TODO: add cancel function.
    $callback = $path . '/callback.php?nid=' . $nid . '&uid=' . $uid . '&rid=' . $rid[0] . '&key=' . $key;
    $delay = 60000;
    nodejs_send_user_message($uid, $subject, $body, $callback, $delay);
    // TODO: add a GCM hook,
    return;
  }
  elseif ($x === 1) {
    $distance = $drivers[0]->distance;
    $bounty = 0;
    $start_time = NULL;
    //$driver = $x;
    $driver = -1;
    $uid = $drivers[0]->uid;
    $content = '';
    $content .= custom_pickup_alert_button($nid, $distance, $bounty, $start_time, $driver);
    $body = $content;
    $subject = t('Customer Pickup');
    $callback = $path . '/callback.php?nid=' . $nid . '&uid=' . $uid . '&rid=' . $rid[0] . '&key=' . $key;
    nodejs_send_user_message($uid, $subject, $body, $callback, $delay);
    // TODO: add a GCM hook.
    return;
  }
  $i = 0;
  $old_uid = $uid;
  while ($x > $i) {
    $j = $i;
    $i++;
    $uid = $drivers[0]->uid;
    if (isset($rides[0]->field_start_time_value)) {
      $start_time = $rides[0]->field_start_time_value;
    }
    $start_time = NULL;
    $distance = $drivers[0]->distance;
    $bounty = 0;
    //$driver = $x;
    $driver = -1;
    $content = '';
    $content .= custom_pickup_alert_button($nid, $distance, $bounty, $start_time, $driver);
    $body = $content;
    $subject = t('Customer Pickup');
    $callback = $path . '/callback.php?nid=' . $nid . '&uid=' . $drivers[0]->uid . '&rid=' . $rid[0] . '&key=' . $key;

    if ($drivers[$j]->uid  == $old_uid) {
      if (isset($drivers[$i])) {
        $uid = $drivers[$i]->uid;
        //$start_time = $rides[0]->field_start_time_value;
        $start_time = NULL;
        $distance = $drivers[$i]->distance;
        //$driver = $x;
        $driver = -1;
        $body = custom_pickup_alert_button($nid, $distance, $bounty, $start_time, $driver);
        $callback = $path . '/callback.php?nid=' . $nid . '&uid=' . $uid . '&rid=' . $rid[0] . '&key=' . $key;

        $i = $x;
      }
    }
    if ($i === $x) {
      if ($delay > 15000) {
        $uid = 1;
      }
      nodejs_send_user_message($uid, $subject, $body, $callback, $delay);
    }
  }
  return ;
}

/**
 * Display output
 *
 * @return string
 *   Returns a single alert suitable for ajax.
 */
function custom_pickup_output() {
  global $user;
  $uid = $user->uid;
  header('Content-type: text/plain; charset=UTF-8');
  header('Content-Disposition: inline');
  $content  = custom_pickup_content($uid);
  return $content;
}

//
// function custom_pickup_init() {
//   drupal_add_js( drupal_get_path('module', 'custom_pickup') . '/js/custom_pickup.js');
// }


/**
* function to return customer location
* called from script.js
**/
function custom_pickup_get_customer_loc() {
   global $user;
	 $nid = $_POST['nid'];
	 $node = node_load($nid);
	 if ($node->type == 'ride_booker') {
		 $lat = $node->field_geoloc['und'][0]['lat'];
		 $lon = $node->field_geoloc['und'][0]['lng'];
		 echo json_encode(array("lat"=>$lat,"lon"=>$lon));
	 } else {
	   echo "error"; die;
	 }
}

/**
* function to return all drivers' location
* called from script.js
**/
function custom_pickup_get_driver_loc() {
    global $user;
	  $query = db_select('profile', 'p');
		$query->join('field_data_field_car_location', 'f', 'p.pid = f.entity_id');
		$query->join('users', 'u', 'p.uid = u.uid');
		$query->join('users_roles', 'r1', 'u.uid = r1.uid and r1.rid = 4');
		$query->join('users_roles', 'r2', 'u.uid = r2.uid  and r2.rid = 7');
		$query->join('users_roles', 'r3', 'u.uid = r3.uid  and r3.rid = 8');
		$query
			->fields('p', array('pid'))
			->fields('u', array('name'))
			->fields('f', array('field_car_location_wkt'))
			->condition('p.type', 'driver')
			->condition('r1.rid', '4')
			->condition('r2.rid', '7')
			->condition('r3.rid', '8');
			$result = $query->execute();
      $driver_array = array(); 
			while($record = $result->fetchAssoc()) {
			     //echo $record['field_car_location_wkt'];
					 $temp_arr = explode('(', $record['field_car_location_wkt']);
					 $loc_array = array();
					 if ($temp_arr[1]) {
					   $temp_arr[1] = str_replace(')', '', $temp_arr[1]);
						 $loc_array = explode(' ', $temp_arr[1]);
					 }
					 $driver_array[$record['name']] = $loc_array;
			}
		 echo json_encode($driver_array);
}
