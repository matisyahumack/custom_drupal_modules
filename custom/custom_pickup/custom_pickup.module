<?php 
/**
 * @file
 * Handles all of the custom pickup functions
 */

/*
 * Implements hook_menu().
 */
function custom_pickup_menu(){
  $items = array();
         
  $items['pickup'] = array(
    'title'            => t('Rides Available'),
    'page callback'    => 'custom_pickup_output',
    'access arguments' => array('access content'),
  );

  $items['pickup/admin'] = array(
    'title'            => t('Rides Available'),
    'page callback'    => 'custom_pickup_output',
    'access arguments' => array('access content'),
  );
             
  return $items;
}

/**
 * Function that returns all available rides
 *
 * @pram string $cck
 *   The node type that you want to query. Initially either
 *   'ride_booker' or 'taxi_ride'.
 *
 * @param string $cck
 * @return array
 *   This returns all available rides as an array of objects
 */
function custom_pickup_available_rides($cck='taxi_ride'){
  $rides = db_query('
  SELECT
    node.nid,
    start_time.field_start_time_value,
    field_datageo_lat,
    field_datageo_lon
  FROM 
    node 
    left join field_data_field_car_driver as driver
      on driver.entity_id = node.nid
    join field_data_field_datageo as geo 
      on geo.entity_id = node.nid
    join field_data_field_start_time as start_time
      on start_time.entity_id = node.nid
  WHERE
    driver.entity_id is null
  and
    node.type = :type', array(':type' => $cck))->fetchAll();
  return $rides;
}

/**
 * Generates a single accept ride button.
 *
 * @param int $uid
 *   The user (driver) that you want to generate the button for.
 * @return string
 */
function custom_pickup_content($uid=0) {
  $x = 0;
  $content = '';

  $rides = custom_pickup_available_rides();
  $x = count($rides);

  $content .= '<div>';
  while ($x > 0) {
    $x--;
    $content .= '<a class="large button success" href="/node/' .$rides[$x]->nid . '/accept">'. t('Pickup Ride at ') . date("Y-m-d H:i:s", $rides[$x]->field_start_time_value) ;
    $content .= custom_pickup_drivers($rides[$x]->field_datageo_lat, $rides[$x]->field_datageo_lon);
    $content .=  '</a>';
    $content .=  '<br>';
		$content .= '<audio src="/sites/all/themes/black_car/alert.mp3"  autoplay></audio>';
    $content .= '<span class="large button alert reject" href="">'. t('Reject');
    $content .=  '</span>';
  }

  $content .= '</div>';

  return $content;
}

/**
 * Determines if the request is in a taxi area.
 *
 * @param float $lat
 *   The latitude of the request.
 * @param float $lon
 *   The longitude of the request.
 *
 * @return array
 *   An array of the term IDs of the taxis that cover the location.
 */
function custom_pickup_taxi_area($lat, $lon) {
    $taxi_area = db_query('
      SELECT DISTINCT
        entity_id "eid" 
      FROM   
        field_data_field_coverage_area
      WHERE
          entity_type LIKE :taxonomy
        AND
          bundle = :taxi_area
        AND
          field_coverage_area_left < :lon
        AND 
          field_coverage_area_right > :lon
        AND 
          field_coverage_area_top > :lat
        AND 
          field_coverage_area_bottom < :lat
        ', array(
          ':taxonomy' => 'taxonomy_term',
          ':taxi_area' => 'taxi_area',
          ':lat' => $lat,
          ':lon' => $lon,
          ))->fetchAll();
    return $taxi_area;
}

/**
 * Implements hook_node_validate().
 */
function custom_pickup_node_validate($node, &$form, &$form_state) {
  if ($node->type === 'taxi_ride') {
    // validation test -- could be an include file
    $lat = $form['field_geoloc']['und'][0]['lat']['#value'];
    $lon = $form['field_geoloc']['und'][0]['lng']['#value'];
    $taxi_area = custom_pickup_taxi_area($lat, $lon);
    

    if ( count($taxi_area) === 0 ) {
      form_set_error('the address field --- this needs changed', 
        t('The address you requested is not covered by any of our taxi companies. You could try and request a town car.'));
    } else {
    }
    // test to see if the date is in the future or not
    $pickup_time = $form['field_start_time']['und'][0]['#value']['value']['year'];
    $pickup_time .= '-' . $form['field_start_time']['und'][0]['#value']['value']['month'];
    $pickup_time .= '-' . $form['field_start_time']['und'][0]['#value']['value']['day'];
    $pickup_time .= ' ' . $form['field_start_time']['und'][0]['#value']['value']['hour'];
    $pickup_time .= ':' . $form['field_start_time']['und'][0]['#value']['value']['minute'];
    $pickup_time .= ' ' . $form['field_start_time']['und'][0]['#value']['value']['ampm'];
    $pickup_time .= ' ' . $form['field_start_time']['und'][0]['#default_value']['timezone'];
    
    $pickup_time = strtotime($pickup_time);
    $temp =  $pickup_time - time();
    if ($temp < -300) {
      form_set_error('pickup time in past', 
        t('The pickup time is in the past. Unfortunately, none of our taxis are equipped with a flux capacitor.'));
    }

  }
}

/**
 * Implements hook_node_presave();
 *   Adds the term IDs of the taxi companies that cover the area.
 */
function custom_pickup_node_presave($node ) {
  if ($node->type === 'taxi_ride') {
    $lat = $node->field_geoloc[$node->language][0]['lat'];
    $lon = $node->field_geoloc[$node->language][0]['lng'];
    $start_time = $node->field_start_time[$node->language][0]['value'];
    $taxi_area = custom_pickup_taxi_area($lat, $lon);
    if (count($taxi_area) > 0 ) {
      $i = 0;
      $x = count($taxi_area);
      while ($i < $x) {
        $node->field_taxi_region[$node->language][]['tid'] = $taxi_area[$i]->eid;
        $i++;
      }
    }
    $current_time = time();
    if ( ($current_time - $start_time) > 0) {
      if ($current_time - $start_time < 300) {
        $start_time = $current_time;
      }
    }
    $node->field_start_time[$node->language][0]['value'] = $start_time ;
  }
}

/**
 * Create a list of the available drivers for a ride.
 *
 * @param float|int $lat
 *   The latitude of the pickup request.
 * @param float|int $lon
 *   The longitude of the pickup request.
 * @param array $rid
 *   An array of int Role ID(s) of the drivers you are looking for. (rid 4 is town car driver)
 *
 * @return string
 *   The HTML to embed in a page or block.
 */
function custom_pickup_drivers($lat=0, $lon=0, $rid= array(4,11)) {
  $x = 0;
  $content = '';
  $drivers = db_query('
  select
    profile.uid,
    entity_id,
    sqrt( power((field_car_location_lat - :lat ) ,2)  + power((field_car_location_lon - :lon) ,2)) * 69  as distance 
  from
    field_data_field_car_location
    join profile
      on profile.pid = field_data_field_car_location.entity_id
    join users_roles
      on users_roles.uid = profile.uid
  where
    profile.uid
      IN
        (select uid from users_roles where rid = 8)
  AND
    users_roles.rid IN (:rid)
  order by 
    distance desc', array(':lat' => $lat,':lon' => $lon, ':rid' => $rid))->fetchAll();

  $x = count($drivers);
  while ($x > 0) {
    $x--;
    $content .= '<div class="driver-'. $drivers[$x]->uid .'" >';
    $content .= t('Driver ') . $drivers[$x]->uid . ' is ' . number_format($drivers[$x]->distance, 2) . ' miles away.';
    $content .= '</div>';
  }
  return $content;
}

/**
 * Print out the get ride and cancel buttons.
 *
 * @param $nid
 * @param $distance
 * @param int $bounty
 * @param null $start_time
 * @param $driver
 * @internal param $drivers
 * @return string
 * @internal param $
 */
function custom_pickup_alert_button($nid, $distance, $bounty = 0, $start_time = NULL, $driver = -1) {

  $content = '<a class="large button success" href="/node/' . $nid . '/accept">' . t('Accept');
  if ($start_time != NULL) {
    //$content .= date("Y-m-d H:i:s", $start_time) . '<br />' ;
    $content .= date("H:i:s", $start_time) . '<br />';
  }
  $content .= t('The Pickup is ') . number_format($distance, 2) . t(' miles away.');
	$content .= '<audio src="/sites/all/themes/black_car/alert.mp3"  autoplay></audio>';
  if ($bounty > 0){
    $content .= '<h2>' . t('Bounty of $') . $bounty . '.</h2>';
  }
  $content .= '</a>';
  $content .= '<br>';
  $content .= '<span class="large button alert reject" href="">' . t('Reject');
  $content .= '</span>';
  if ($driver > -1) {
    $content .= $driver . ' drivers';
  }
  return $content;
}

/**
 * Finds the next driver to send an alert to and sends the alert via nodejs.
 *
 * @param int $nid
 *   The node ID.
 * @param int $uid
 *   The user ID.
 * @param array|int $rid
 *   The role ID -- this might need to be reworked.
 *
 * @return NULL
 *   Errors are discarded.
 */
function custom_pickup_driver_alert($nid=0, $uid=1, $rid=array(8)) {

  $path = '/' . drupal_get_path('module', 'custom_pickup');
  $key = 'vUKtuYvHt3yT8CDBVu3QHq6IB92MwL6w'; // this should be grabbed from a config
  $node_type = array('ride_booker', 'taxi_ride');

  $rides = db_query('
  SELECT
    node.nid,
    node.uid,
    start_time.field_start_time_value,
    field_datageo_lat,
    field_datageo_lon
  FROM 
    node 
    left join field_data_field_car_driver as driver
      on driver.entity_id = node.nid
    left join field_data_field_ride_event as ride_event
      on ride_event.entity_id = node.nid
    join field_data_field_datageo as geo 
      on geo.entity_id = node.nid
    join field_data_field_start_time as start_time
      on start_time.entity_id = node.nid
  WHERE
    (driver.entity_id is null OR field_ride_event_tid = 5)
  and
    node.nid = :nid
  and
    ( field_ride_event_tid is NULL OR
    field_ride_event_tid != 4 )
  and
    node.type IN (:type)', array(':type' => $node_type,':nid' => $nid))->fetchAll();

  if ( count($rides) === 0 ) {
    return;
  }

  $lat = $rides[0]->field_datageo_lat; 
  $lon = $rides[0]->field_datageo_lon;
  $message_id = 'ride' . $nid;

  if (isset($rides[0]->field_start_time_value)) {
    $now = time();
    $time_to_pickup = $rides[0]->field_start_time_value - $now;
    if ( $time_to_pickup > (5 * 60 ) ) {
      $delay = 1000 * ($time_to_pickup - (5 * 60));
    }
    else {
      $delay = 15000;
    }
  }
  else {
    $delay = 15000; // delay is 15 seconds by default this should be set by getting the scheduled time
  }
  $x = 0;
  $drivers = db_query('
  SELECT
    profile.uid,
    entity_id,
    sqrt( power((field_car_location_lat - :lat ) ,2)  + power((field_car_location_lon - :lon) ,2)) * 69  AS distance
  FROM
    field_data_field_car_location
    JOIN profile
      ON profile.pid = field_data_field_car_location.entity_id
    JOIN users_roles
      ON users_roles.uid = profile.uid
  WHERE
    users_roles.rid = :rid
  AND
    profile.uid IN (SELECT uid FROM users_roles WHERE rid = 8)
  ORDER BY
    distance ASC', array(':lat' => $lat, ':lon' => $lon, ':rid' => $rid[0]))->fetchAll();

  $x = count($drivers);
  if($x === 0) {
    $uid = $rides[0]->uid;
    $subject = t("No drivers");
    $body = t('We are sorry for the inconvience, Do you want to cancel or wait?'); // TODO: add cancel function.
    $callback = $path . '/callback.php?nid=' . $nid . '&uid=' . $uid . '&rid=' . $rid[0] . '&key=' . $key;
    $delay = 60000;
    nodejs_send_user_message($uid, $subject, $body, $callback, $delay);
    //TODO: add a GCM hook, 
    return;
  }
  else if ($x === 1) {
    $distance = $drivers[0]->distance;
    $bounty = 0;
    $start_time = NULL;
    //$driver = $x;
    $driver = -1;
    $uid = $drivers[0]->uid;
    $content = '';
    $content .= custom_pickup_alert_button($nid, $distance, $bounty, $start_time, $driver);
    $body = $content;
    $subject = t('Customer Pickup');
    $callback = $path . '/callback.php?nid=' . $nid . '&uid=' . $uid . '&rid=' . $rid[0] . '&key=' . $key;
    nodejs_send_user_message($uid, $subject, $body, $callback, $delay);
    //TODO: add a GCM hook, 
    return;
  }
  $i = 0;
  $old_uid = $uid;
  while ($x > $i) {
    $j = $i;
    $i++;
    $uid = $drivers[0]->uid;
    if (isset($rides[0]->field_start_time_value)) {
      $start_time = $rides[0]->field_start_time_value;
    }
    $start_time = NULL;
    $distance = $drivers[0]->distance;
    $bounty = 0;
    //$driver = $x;
    $driver = -1;
    $content = '';
    $content .= custom_pickup_alert_button($nid, $distance, $bounty, $start_time, $driver);
    $body = $content;
    $subject = t('Customer Pickup');
    $callback = $path . '/callback.php?nid=' . $nid . '&uid=' . $drivers[0]->uid . '&rid=' . $rid[0] . '&key=' . $key;

    if ($drivers[$j]->uid  == $old_uid) {
      if (isset($drivers[$i])) {
        $uid = $drivers[$i]->uid;
        //$start_time = $rides[0]->field_start_time_value;
        $start_time = NULL;
        $distance = $drivers[$i]->distance;
        //$driver = $x;
        $driver = -1;
        $body = custom_pickup_alert_button($nid, $distance, $bounty, $start_time, $driver);
        $callback = $path . '/callback.php?nid=' . $nid . '&uid=' . $uid . '&rid=' . $rid[0] . '&key=' . $key;
      
        $i = $x;
      }
    }
    if ($i === $x) {
      if ($delay > 15000) {
        $uid = 1;
      }
      nodejs_send_user_message($uid, $subject, $body, $callback, $delay);
    }
  }
  return ;
}

/*
 * Display output
 *
 * @return string
 *   Returns a single alert suitable for ajax.
 */
function custom_pickup_output() {
  global $user;
  $uid = $user->uid;

  header('Content-type: text/plain; charset=UTF-8');
  header('Content-Disposition: inline');
  $content  = custom_pickup_content($uid);
  return $content;
}

/*
function custom_pickup_init() {
  drupal_add_js( drupal_get_path('module', 'custom_pickup') . '/js/custom_pickup.js');
}
*/


